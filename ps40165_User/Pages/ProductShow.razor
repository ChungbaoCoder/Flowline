@page "/products"
@layout StoreLayout

@inject ProductService _svc
@inject CartService CartService

<h3 class="mb-4">Products</h3>

@if (isLoading)
{
    <p>Đang tải cho bạn...</p>
}
else if (products.Count == 0)
{
    <p>Không tìm thấy sản phẩm</p>
}
else
{
    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-4">
        @foreach (var product in products)
        {
            <div class="col">
                <div class="card h-100 shadow-sm">

                    <img src="@($"https://localhost:7036/{product.GetMainImage}")" class="card-img-top" alt="@product.Name" />

                    <div class="card-body d-flex flex-column">

                        <h5 class="card-title">@product.Name</h5>
                        <p class="card-text text-muted">@product.Description</p>
                        <div class="mt-auto d-flex justify-content-between align-items-center">
                            <span class="fw-bold text-primary">@($"{product.Price:C}")</span>
                            <button class="btn btn-sm btn-outline-success" @onclick="() => AddToCart(product)">Add to Cart</button>
                        </div>

                    </div>

                </div>
            </div>
        }
    </div>

    <div class="d-flex justify-content-center my-4">
        <nav>
            <ul class="pagination">
                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="PrevPage">Previous</button>
                </li>
                @for (int i = 1; i <= totalPages; i++)
                {
                    <li class="page-item @(currentPage == i ? "active" : "")">
                        <button class="page-link" @onclick="@(() => GoToPage(i))">@i</button>
                    </li>
                }
                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                    <button class="page-link" @onclick="NextPage">Next</button>
                </li>
            </ul>
        </nav>
    </div>
}

@code {
    private List<Product> products = new();
    private int currentPage = 1;
    private int totalPages = 1;
    private int pageSize = 6;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        isLoading = true;
        var result = await _svc.GetListAsync(currentPage, pageSize, null);
        if (result.IsSuccess && result.Data is not null)
        {
            products = result.Data.Items;
            totalPages = result.Data.TotalPages;
        }
        isLoading = false;
    }

    private async Task AddToCart(Product product)
    {
        var cartItem = new Product
            {
                ProductId = product.ProductId,
                Name = product.Name,
                Price = product.Price,
                StockLevel = 1,
                Description = product.Description,
                ProductImages = product.ProductImages
            };

        await CartService.AddToCartAsync(cartItem);
    }

    private async Task GoToPage(int page)
    {
        currentPage = page;
        await LoadProducts();
    }

    private async Task PrevPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadProducts();
        }
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadProducts();
        }
    }
}