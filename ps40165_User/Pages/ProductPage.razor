@page "/products"

@inject ProductService _pro
@inject CategoryService _cate

<div class="row">

    <menu class="col">

        <h4>Sản phẩm</h4>

        <ul class="nav gap-2">
            <li><a href="" class="nav-link p-0 text-body-secondary">a</a></li>
            <li><a href="" class="nav-link p-0 text-body-secondary">b</a></li>
            <li><a href="" class="nav-link p-0 text-body-secondary">c</a></li>
        </ul>

        <div class="row row-cols-1 row-cols-md-3 g-4 mt-2">

            @if (products is not null)
            {
                foreach (var product in products)
                {
                    int id = product.Id;

                    <div class="col">
                        <div class="card h-100">

                            <a class="nav-link" href="/product/@id">
                                <img src="..." class="card-img-top" alt="...">
                                <div class="card-body">
                                    <h5 class="card-title">@product.Name</h5>
                                    <p class="card-text">@product.Description</p>
                                </div>

                                <div class="container d-flex justify-content-end px-0">
                                    <span>@product.Price đ</span>
                                </div>
                            </a>

                        </div>
                    </div>
                }
            }

        </div>

        <nav class="mt-3">
            <ul class="pagination">

                <li class="page-item @(pageNumber == 1 ? "disabled" : "")">
                    <a class="page-link" href="#" @onclick="PreviousPage">
                        <span aria-hidden="true">&laquo;</span>
                    </a>
                </li>

                @for (int i = 1; i <= totalPage; i++)
                {
                    <li class="page-item @(i == pageNumber ? "active" : "")">
                        <a class="page-link" href="#" @onclick="() => GoToPage(i)">@i</a>
                    </li>
                }

                <li class="page-item @(pageNumber == totalPage ? "disabled" : "")">
                    <a class="page-link" href="#" @onclick="NextPage">
                        <span aria-hidden="true">&raquo;</span>
                    </a>
                </li>

            </ul>
        </nav>

    </menu>

    <aside class="col-3">

        <h4>Thể loại</h4>

        <ul class="list-group list-group-flush">

            @if (categories is not null)
            {
                foreach (var category in categories)
                {
                    <li class="list-group-item">@category.Name</li>
                }
            }

        </ul>

    </aside>

</div>

@code {
    private List<Product> products = new List<Product>();

    private List<Category> categories = new List<Category>();

    private string? searchText;

    protected override async Task OnInitializedAsync()
    {
        await PopulateProduct();
    }

    private async Task PopulateProduct()
    {
        var response = await _pro.GetPagination(pageNumber, pageSize, searchText);

        if (response is not null)
        {
            products = response.Data.Items;
            totalItems = response.Data.TotalCount;
            totalPage = response.Data.TotalPages;
            pageNumber = response.Data.PageNumber;
        }
    }

    public async Task PopulateCategory()
    {
        var response = await _cate.GetList(1, 5, searchText);

        if (response is not null)
        {
            categories = response.Data;
        }
    }
}

@code {

}

@code {
    private int pageNumber = 1;

    private int pageSize = 25;

    private int totalItems;

    private int totalPage;

    private async Task GoToPage(int page)
    {
        pageNumber = page;
        await PopulateProduct();
    }

    private async Task NextPage()
    {
        if (pageNumber < totalPage)
        {
            pageNumber++;
            await PopulateProduct();
        }
    }

    private async Task PreviousPage()
    {
        if (pageNumber > 1)
        {
            pageNumber--;
            await PopulateProduct();
        }
    }

    public async Task First()
    {
        pageNumber = 1;
        await PopulateProduct();
    }

    public async Task Last()
    {
        pageNumber = totalPage;
        await PopulateProduct();
    }

    private async Task SizeDisplayChanged(ChangeEventArgs e)
    {
        pageSize = int.Parse(e.Value.ToString());
        await PopulateProduct();
    }
}
