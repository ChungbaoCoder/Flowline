@page "/categories"

@inject IHttpClientFactory _client

<PageTitle>Category Page</PageTitle>

<div class="d-flex justify-content-between align-items-center">

    <h5 id="Table-title">Manage Products</h5>

    <form class="input-group w-50" action="Post">
        <input type="text" class="form-control" placeholder="Find by SKU, GTIN or MPN">
        <span class="input-group-text">🔍</span>
    </form>

</div>

<a href="#" class="btn btn-light">Filter</a>
<NavLink href="/Categories/Create" activeClass="active" class="btn btn-light">+ Thêm mới</NavLink>

<div class="mt-3" style="max-height: 500px; overflow: auto;">
    <table class="table table-bordered">

        <thead class="table-light sticky-top">
            <tr>

                <th class="col-size-sm text-center align-middle sticky-start">
                    <input type="checkbox" name="" id="">
                </th>
                <th>Loại sản phẩm</th>
                <th>Alias</th>
                <th class="col-size-sm sticky-end"></th>

            </tr>
        </thead>

        <tbody class="default-link">

            @if (categories == null || !categories.Any())
            {
                <tr>
                    <td class="text-center align-middle">
                        <input type="checkbox">
                    </td>
                    <td colspan="1">

                    </td>
                    <td>
                        <div class="d-flex gap-1 m-0 position-relative">
                            <button type="button" class="btn btn-sm p-0">✏️</button>
                            <button type="button" class="btn btn-sm p-0">🗑️</button>
                        </div>
                    </td>
                </tr>
            }
            else
            {
                @foreach (var category in categories)
                {
                    <tr>
                        <td class="text-center align-middle">
                            <input type="checkbox">
                        </td>
                        <td>@category.Name</td>
                        <td>@category.Alias</td>
                        <td>
                            <div class="d-flex gap-1 m-0 position-relative">
                                <button type="button" class="btn btn-sm p-0">✏️</button>
                                <button type="button" class="btn btn-sm p-0">🗑️</button>
                            </div>
                        </td>
                    </tr>
                }
            }

        </tbody>

        <tfoot class="sticky-bottom table-light">
            <tr class="default-link">

                <td class="text-center align-center">
                    <a href="">↻</a>
                </td>

                <td>
                    <div class="d-flex justify-content-between align-items-center">

                        <ul class="d-flex gap-2 m-0 list-unstyled">
                            <li><button class="btn btn-sm btn-light">&lt;&lt;</button></li>
                            <li><button class="btn btn-sm btn-light" @onclick="PreviousPage">&lt;</button></li>

                            @for (int i = 1; i <= totalPage; i++)
                            {
                                <li>
                                    <button @onclick="() => ChangePage(i)" class="@(currentPage == i ? "fw-bold" : "") btn btn-sm btn-light">@i</button>
                                </li>
                            }

                            <li><button class="btn btn-sm btn-light" @onclick="NextPage">&gt;</button></li>
                            <li><button class="btn btn-sm btn-light">&gt;&gt;</button></li>
                        </ul>

                        <p class="m-0">
                            Đang hiển thị @((currentPage - 1) * pageSize + 1)-@(Math.Min(currentPage * pageSize, totalItems)) trong số @totalItems loại sản phẩm
                        </p>

                    </div>
                </td>

                <td>
                    <select class="form-select form-select-sm" @onchange="OnPageSizeChanged">
                        <option selected value="25">Hiện 25 dòng</option>
                        <option value="50">Hiện 50 dòng</option>
                        <option value="100">Hiện 100 dòng</option>
                        <option value="150">Hiện 150 dòng</option>
                        <option value="200">Hiện 200 dòng</option>
                    </select>
                </td>

                <td class="text-center align-center">
                    <button type="button" class="btn btn-sm btn-light">⚙</button>
                </td>

            </tr>
        </tfoot>

    </table>
</div>

@code {
    private List<Category> categories = new List<Category>();

    private int currentPage = 1;

    private int pageSize = 25;

    private int totalPage = 1;

    private int totalItems = 0;

    protected override async Task OnInitializedAsync()
    {
        await PopulateList();
    }

    private async Task PopulateList()
    {
        CategoryApi api = new CategoryApi(_client.CreateClient("meta"));
        var response = await api.GetList(currentPage, pageSize, "");

        if (response is not null)
        {
            currentPage = response.Data.PageNumber;
            pageSize = response.Data.PageSize;
            totalPage = response.Data.TotalPages;
            totalItems = response.Data.TotalCount;
            categories = response.Data.Items;
        }
        else
        {
            categories = new List<Category>();
        }
    }

    private async Task ChangePage(int page)
    {
        currentPage = page;
        await PopulateList();
    }

    private async Task NextPage()
    {
        if (currentPage < totalPage)
        {
            currentPage++;
            await PopulateList();
        }
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await PopulateList();
        }
    }

    private async Task OnPageSizeChanged(ChangeEventArgs e)
    {
        pageSize = int.Parse(e.Value.ToString());
        await PopulateList();
    }
}
