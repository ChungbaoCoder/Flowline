@page "/accounts/edit/{id:int}"
@layout StoreLayout

@inject IJSRuntime _js
@inject NavigationManager _nav

<div class="d-flex justify-content-between align-items-center sticky-top">

    <div>
        <NavLink class="nav-link" href="/orders/manage" activeClass="active">⬅</NavLink>

        <h5 class="d-inline">Chỉnh sửa tài khoản - @id</h5>
    </div>

    <div>
        <button type="submit" form="edit" class="btn btn-primary">✓ Lưu</button>
        <button type="submit" form="edit" class="btn btn-secondary">Lưu và chỉnh sửa thêm</button>
    </div>

</div>

<div class="row gap-3 mt-3">

    <aside class="col-2 border-end">
        <ul class="list-unstyled default-link">

            <li class="mt-2"><a href="">Thông tin</a></li>
            <li class="mt-2"><a href="">Sản phẩm</a></li>

        </ul>
    </aside>

    <main class="col-9">

        <EditForm id="edit" Model="@request" FormName="EditOrder" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit" class="needs-validation">
            <DataAnnotationsValidator />

            <div class="mb-3 d-flex">
                <label class="form-label mt-2" style="min-width: 225px;">Mã tài khoản</label>
                <div>
                    <InputNumber class="form-control" style="min-width: 425px;" @bind-Value="@request.Id" disabled />
                </div>
            </div>

            <div class="mb-3 d-flex">
                <label class="form-label mt-2" style="min-width: 225px;">Tên người dùng</label>
                <div>
                    <InputText class="form-control" style="min-width: 425px;" @bind-Value="@request.Name" />
                </div>
            </div>

            <div class="mb-3 d-flex">
                <label class="form-label mt-2" style="min-width: 225px;">Email</label>
                <div>
                    <InputText class="form-control" style="min-width: 425px;" @bind-Value="@request.Email" />
                </div>
            </div>

            <div class="mb-3 d-flex">
                <label class="form-label mt-2" style="min-width: 225px;">Số điện thoại</label>
                <div>
                    <InputText class="form-control" style="min-width: 425px;" @bind-Value="@request.PhoneNumber" />
                </div>
            </div>

            <div class="mb-3 d-flex">
                <label class="form-label" style="min-width: 225px;">Lần đăng nhập cuối</label>
                <div>
                    @request.LastLogin
                </div>
            </div>

            <div class="mb-3 d-flex">
                <label class="form-label" style="min-width: 225px;">Ngày tạo</label>
                <div>
                    @request.CreatedOnUtc
                </div>
            </div>

            <div class="mb-3 d-flex">
                <label class="form-label" style="min-width: 225px;">Ngày cập nhật</label>
                <div>
                    @request.UpdatedOnUtc
                </div>
            </div>

        </EditForm>

    </main>

</div>

@if (showToast)
{
    <div class="toast-container position-fixed bottom-0 end-0 p-3" style="z-index: 1055;">

        <div id="successToast" class="toast align-items-center text-bg-success border-0 show" role="alert" aria-live="assertive" aria-atomic="true">

            <div class="d-flex">
                <div class="toast-body">
                    ✅ Cập nhật hóa đơn thành công
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>

        </div>

    </div>
}

@code {
    [Parameter]
    public int id { get; set; }

    private AccountRequest request = new AccountRequest();

    private bool error = false;

    private bool firstTime = true;

    private bool showToast = false;

    protected override void OnInitialized()
    {
        error = false;
        firstTime = true;
        showToast = false;
    }

    private async Task HandleValidSubmit()
    {
        if (firstTime)
        {
            firstTime = false;
            return;
        }

        error = false;
        showToast = true;

        await Task.Delay(500);
        await _js.InvokeVoidAsync("showSuccessToast");
    }

    private void HandleInvalidSubmit()
    {
        error = true;
    }
}
