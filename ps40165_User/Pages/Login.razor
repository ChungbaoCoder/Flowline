@page "/authentication/login"
@using ps40165_User.Requests
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<h3>Login</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Email:</label>
        <InputText @bind-Value="loginModel.Email" class="form-control" />
        <ValidationMessage For="@(() => loginModel.Email)" />
    </div>
    <div class="form-group">
        <label>Password:</label>
        <InputText @bind-Value="loginModel.Password" type="password" class="form-control" />
        <ValidationMessage For="@(() => loginModel.Password)" />
    </div>
    <button type="submit" class="btn btn-primary" disabled="@isProcessing">
        @if (isProcessing)
        {
            <span class="spinner-border spinner-border-sm"></span>
        }
        Login
    </button>
</EditForm>

@code {
    private LoginRequest loginModel = new LoginRequest();
    private string? errorMessage;
    private bool isProcessing = false;

    private async Task HandleLogin()
    {
        isProcessing = true;
        errorMessage = null; // Clear previous errors
        try
        {
            var response = await Http.PostAsJsonAsync("Auth/employee", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var loginResult = await response.Content.ReadFromJsonAsync<Response<JwtToken>>();
                if (loginResult != null && !string.IsNullOrEmpty(loginResult.Data.Token))
                {
                    // IMPORTANT: Cast to your custom provider
                    var customAuthStateProvider = (JwtAuthStateProvider)AuthenticationStateProvider;
                    await customAuthStateProvider.MarkUserAsAuthenticated(loginResult.Data.Token);

                    // Redirect to home or admin page after login
                    NavigationManager.NavigateTo("/");
                }
                else
                {
                    errorMessage = "Login failed: Invalid token received.";
                }
            }
            else
            {
                // Handle different error statuses if needed
                errorMessage = $"Login failed: {response.ReasonPhrase} ({(int)response.StatusCode})";
                var errorContent = await response.Content.ReadAsStringAsync();
                if (!string.IsNullOrWhiteSpace(errorContent))
                {
                    errorMessage += $"\nDetails: {errorContent}";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
        }
    }
}