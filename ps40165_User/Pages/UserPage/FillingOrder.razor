@page "/user/cart/checkout"
@layout StoreLayout

@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization

@inject CartService _cart
@inject OrderService _order
@inject AuthenticationStateProvider _auth
@inject NavigationManager _nav

<h3 class="mb-4">Checkout</h3>

@if (isLoading)
{
    <p>Đang tải...</p>
}
else if (orderedItems.Count == 0)
{
    <div class="alert alert-info">Giỏ hàng của bạn đang trống.<a href="/products">Tiếp tục mua</a>.</div>
}
else
{
    <div class="table-responsive mb-4">
        <table class="table table-bordered align-middle">
            <thead>
                <tr>
                    <th></th>
                    <th>Sản phẩm</th>
                    <th>Số lượng</th>
                    <th>Giá</th>
                    <th>Tổng</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in orderedItems)
                {
                    <tr>
                        <td><img src="@($"https://localhost:7036/{item.ImagePath}")" alt="Product" width="60" /></td>
                        <td>@item.ProductId</td>
                        <td>@item.Quantity</td>
                        <td>@($"{item.Price:C}")</td>
                        <td>@($"{item.Quantity * item.Price:C}")</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <h5>Total: <strong class="text-success">@($"{Total:C}")</strong></h5>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">@errorMessage</div>
    }

    @if (isSuccess)
    {
        <div class="alert alert-success mt-3">
            🎉 Đã đặt đơn hàng xin đợi một chút...
        </div>
    }
    else
    {
        <button class="btn btn-primary mt-3" @onclick="CheckOut" disabled="@isSubmitting">Place Order</button>
    }
}

@code {
    private List<OrderedItem> orderedItems = new();
    private bool isLoading = true;
    private bool isSubmitting = false;
    private bool isSuccess = false;
    private string? errorMessage;

    private decimal Total => orderedItems.Sum(i => i.Price * i.Quantity);

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var cart = await _cart.GetCartAsync();
            if (cart != null)
            {
                orderedItems = cart.Select(p => new OrderedItem
                    {
                        ProductId = p.ProductId,
                        SKU = p.SKU,
                        ImagePath = p.GetMainImage,
                        Quantity = p.StockLevel,
                        Price = p.Price
                    }).ToList();
            }
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task CheckOut()
    {
        errorMessage = null;
        isSubmitting = true;

        try
        {
            var authState = await _auth.GetAuthenticationStateAsync();
            var user = authState.User;

            if (!user.Identity?.IsAuthenticated ?? true)
            {
                errorMessage = "⚠️ Bạn phải đăng nhập mới được đặt hàng.";
                return;
            }

            if (!int.TryParse(user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value, out var accountId))
            {
                errorMessage = "Invalid user credentials.";
                return;
            }

            var request = new MakeOrderRequest
                {
                    AccountId = accountId,
                    OrderDate = DateTime.UtcNow,
                    Status = OrderStatus.Pending,
                    Total = Total,
                    Items = orderedItems
                };

            var result = await _order.MakeOrder(request);

            if (result.IsSuccess)
            {
                isSuccess = true;
                await _cart.ClearCartAsync();

                // Optional redirect after delay
                await Task.Delay(2000);
                _nav.NavigateTo("/user/orders");
            }
            else
            {
                errorMessage = "Failed to submit the order. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Something went wrong: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }
}
